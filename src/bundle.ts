import * as esbuild from "esbuild";

import type { ModuleFormat, RuntimeVersion } from "./config";
import type { Logger } from "./logger";
import { hasV3 } from "./node_version";
import { formatJson } from "./util";
import LEMNA_VERSION from "./version";

type BundleOptions = {
  input: string;
  output: string;
  esbuildOptions: Partial<esbuild.BuildOptions>;
  version: RuntimeVersion;
  moduleFormat: ModuleFormat;
  logger: Logger;
};

/**
 * Bundles code with esbuild into a file
 */
export async function bundleCode({
  logger,
  input,
  output,
  esbuildOptions,
  version,
  moduleFormat,
}: BundleOptions): Promise<void> {
  logger.verbose(`Bundling ${input}`);

  const options: esbuild.BuildOptions = {
    // NOTE: AWS SDK is pre-installed on Lambda, so no need to bundle it
    // NOTE: node 18 uses aws sdk v3, but <18 uses v2
    external: hasV3(version) ? ["@aws-sdk/client-*", "@aws-sdk/lib-*"] : ["aws-sdk"],
    bundle: true,
    format: moduleFormat,
    platform: "node",
    ...esbuildOptions,
    entryPoints: [input],
    outfile: output,
    banner: { js: `// generated by Lemna ${LEMNA_VERSION}` },
  };

  logger.silly(formatJson(options));
  logger.verbose(`Writing bundle to ${output}`);

  const bundle = await esbuild.build(options);

  logger.silly(formatJson(bundle));

  if (bundle.warnings.length) {
    logger.warn(formatJson(bundle.warnings));
  }

  const errorCount = bundle.errors.length;
  if (errorCount) {
    throw new Error(`Had ${errorCount} bundle errors`);
  }
}
